
#include <stdint.h> 
//#define ARM_MATH_CM7
//#define __FPU_PRESENT
#include "arm_math.h"
#include "arm_const_structs.h"

#include <Audio.h>
#include <Wire.h>
#include <SPI.h>
#include <SD.h>
#include <SerialFlash.h>

// GUItool: begin automatically generated code
AudioSynthWaveformSine   sine1;          //xy=130,193.00000190734863
AudioMixer4              mixer1;         //xy=301.1937026977539,213.9999485015869
AudioOutputI2S           i2s1;           //xy=532.8062629699707,211.82499313354492
AudioConnection          patchCord1(sine1, 0, mixer1, 0);
AudioConnection          patchCord2(mixer1, 0, i2s1, 0);
AudioConnection          patchCord3(mixer1, 0, i2s1, 1);
AudioControlSGTL5000     sgtl5000_1;     //xy=350.19373321533203,118.0000057220459
// GUItool: end automatically generated code


float testInput_f32_10khz[256] = {0.0 , 0.98935544 ,
0.28794044 , -0.9055537 , -0.5514914 , 0.7450485 , 0.76832914 , -0.5214352 , -0.9200868 , 0.25365457 , 0.99391 , 0.035611432 , -0.9835457 , -0.32186103 , 
0.88987184 , 0.5808479 , -0.72082275 , -0.79063505 , 0.49071756 , 0.9334527 , -0.21904694 , -0.9972038 , -0.07117769 , 0.97648835 , 0.35537332 , -0.87306106 , 
-0.6094676 , 0.6956825 , 0.811938 , -0.45937738 , -0.9456345 , 0.18416141 , 0.99923253 , 0.10665365 , -0.9681922 , -0.3884348 , 0.8551428 , 0.6373142 , -0.66965985 ,
-0.83221096 , 0.42745447 , 0.95661664 , -0.14904226 , -0.9999937 , -0.14199431 , 0.9586679 , 0.4210035 , -0.8361397 , -0.6643523 , 0.64278764 , 0.85142815 , 
-0.39498928 , -0.96638525 , 0.113734044 , 0.9994862 , 0.17715485 , -0.94792736 , -0.45303813 , 0.81607586 , 0.6905476 , -0.61509997 , -0.8695653 , 
0.36202303 , 0.9749279 , -0.07828155 , -0.9977108 , -0.21209066 , 0.9359843 , 0.48449805 , -0.7949768 , -0.71586686 , 0.586632 , 0.8865993 , -0.32859755 , 
-0.9822338 , 0.042729743 , 0.9946698 , 0.2467574 , -0.92285395 , -0.51534337 , 0.7728692 , 0.740278 , -0.55741984 , -0.9025086 , 0.29475516 , 0.9882937 , 
-0.0071237325 , -0.99036694 , -0.28111112 , 0.9085528 , 0.5455349 , -0.7497812 , -0.76375 , 0.52750057 , 0.917273 , -0.2605389 , -0.9930998 , -0.028491315 , 
0.9848077 , 0.3151082 , -0.8930991 , -0.5750344 , 0.72574204 , 0.7862532 , -0.49691215 , -0.93087375 , 0.22599211 , 0.99664617 , 0.06407022 , -0.97799927 , 
-0.3487056 , 0.8765125 , 0.6038044 , -0.70078224 , -0.807759 , 0.46569332 , 0.94329363 , -0.19115862 , -0.9989281 , -0.099567845 , 0.9699501 , 0.38186058 , 
-0.85881394 , -0.63180846 , 0.67493343 , 0.82824004 , -0.43388373 , -0.9545169 , 0.15608265 , 0.9999429 , 0.13493916 , -0.9606704 , -0.41453117 , 0.8400259 , 
0.659011 , -0.6482284 , -0.8476704 , 0.40152374 , 0.9645292 , -0.12080867 , -0.99968916 , -0.1701393 , 0.9501721 , 0.4466759 , -0.82017225 , -0.68537754 , 
0.6207011 , 0.8660254 , -0.36865437 , -0.973318 , 0.08538143 , 0.9981673 , 0.2051236 , -0.9384684 , -0.478254 , 0.79927814 , 0.7108746 , -0.5923863 , 
-0.8832818 , 0.33531734 , 0.98087204 , -0.049845885 , -0.9953791 , -0.23984769 , 0.92557424 , 0.50922537 , -0.7773701 , -0.73546994 , 0.56332004 , 
0.8994177 , -0.30155495 , -0.9871818 , 0.014247104 , 0.99132824 , 0.27426752 , -0.9115059 , -0.5395507 , 0.75447583 , 0.7591322 , -0.5335392 , -0.9144126 , 
0.26740998 , 0.9922392 , 0.021369752 , -0.9860198 , -0.30833942 , 0.8962812 , 0.5691917 , -0.7306245 , -0.7818315 , 0.5030815 , 0.9282475 , -0.2329258 , 
-0.9960379 , -0.0569595 , 0.9794605 , 0.34202015 , -0.87991947 , -0.59811056 , 0.70584637 , 0.8035389 , -0.47198564 , -0.9409049 , 0.19814615 , 0.99857306 , 
0.09247699 , -0.9716587 , -0.375267 , 0.86244154 , 0.62627065 , -0.68017274 , -0.82422704 , 0.440291 , 0.9523687 , -0.16311511 , -0.9998414 , -0.12787716 , 
0.96262425 , 0.4080378 , -0.84386957 , -0.6536363 , 0.6536363 , 0.84386957 , -0.4080378 , -0.96262425 , 0.12787716 , 0.9998414 , 0.16311511 , -0.9523687 , 
-0.440291 , 0.82422704 , 0.68017274 , -0.62627065 , -0.86244154 , 0.375267 , 0.9716587 , -0.09247699 , -0.99857306 , -0.19814615 , 0.9409049 , 0.47198564 , 
-0.8035389 , -0.70584637 , 0.59811056 , 0.87991947 , -0.34202015 , -0.9794605 , 0.0569595 , 0.9960379 , 0.2329258 , -0.9282475 , -0.5030815 , 0.7818315 , 
0.7306245 , -0.5691917 , -0.8962812};

float32_t test[256] = {0};
float32_t out[256] = {0};

arm_cfft_radix4_instance_f32 varInstCfftF32;
arm_rfft_fast_instance_f32 fastfft32;

void setup() {
  // put your setup code here, to run once:
  Serial.begin(9600);
  
  AudioMemory(208);
  sgtl5000_1.enable();
  sgtl5000_1.inputSelect(AUDIO_INPUT_MIC);
  sgtl5000_1.micGain(0);
  sgtl5000_1.unmuteHeadphone();
  sgtl5000_1.audioPreProcessorEnable();
  sgtl5000_1.audioPostProcessorEnable();
  sgtl5000_1.volume(0.3);

  //AudioProcessorUsageMaxReset();
  //AudioMemoryUsageMaxReset();
  
  while(!Serial){}
  //delay(1000);
  get_sine_val(test, 128);
  //delay(1000);
  //Serial.println("BEGIN");
  sine1.amplitude(0.5);
  sine1.frequency(344.5); 
  
  //arm_cfft_radix4_init_f32(&varInstCfftF32, 256, 0, 1);
  arm_rfft_fast_init_f32(&fastfft32, 128);
  /* Process the data through the FFT/IFFT module */
  //arm_cfft_radix4_f32(&varInstCfftF32, test);
  arm_rfft_fast_f32(&fastfft32, test, out, 0);

  //Serial.print("DONE");
  /*
  for(int k = 0; k < 256; k++)
  {
    Serial.println(out[k]);
  }
  */

  arm_rfft_fast_f32(&fastfft32, out, test, 1);

  for(int k = 0; k < 256; k++)
  {
    Serial.println(test[k]);
  }

}

void loop() {
  // put your main code here, to run repeatedly:
  
}

void get_sine_val(float* sine_vals, int Ns)
{
  float fs = 44100.0;
  for(int i = 0; i < Ns; i++)
  {
    sine_vals[i] = sin((float)(2*PI*344.5*i)/fs);
  }
}
